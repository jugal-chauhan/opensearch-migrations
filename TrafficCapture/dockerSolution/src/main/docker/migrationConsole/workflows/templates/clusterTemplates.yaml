apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cluster-templates
spec:
  serviceAccountName: argo-workflow-executor
  
  templates:
    # Elasticsearch 2.4 Single Node Template
    - name: elasticsearch-2-4-single-node
      inputs:
        parameters:
          - name: cluster-name
          - name: namespace
      container:
        image: dtzar/helm-kubectl:latest
        command: [sh, -c]
        args:
          - |
            # Create Elasticsearch 2.4 configuration file
            cat > /tmp/elasticsearch.yml << EOF
            cluster.name: {{inputs.parameters.cluster-name}}
            network.host: 0.0.0.0
            http.host: 0.0.0.0
            transport.host: 0.0.0.0
            discovery.zen.minimum_master_nodes: 1
            bootstrap.system_call_filter: false
            EOF
            
            # Create ConfigMap with the configuration
            kubectl create configmap {{inputs.parameters.cluster-name}}-config \
              --from-file=elasticsearch.yml=/tmp/elasticsearch.yml \
              -n {{inputs.parameters.namespace}} \
              --dry-run=client -o yaml | kubectl apply -f -
            
            # Create Elasticsearch 2.4 deployment directly with kubectl
            cat > /tmp/elasticsearch-2-4.yaml << 'EOF'
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: {{inputs.parameters.cluster-name}}
              namespace: {{inputs.parameters.namespace}}
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: {{inputs.parameters.cluster-name}}
              template:
                metadata:
                  labels:
                    app: {{inputs.parameters.cluster-name}}
                spec:
                  securityContext:
                    runAsUser: 1000
                    runAsGroup: 1000
                    fsGroup: 1000
                  initContainers:
                  - name: install-s3-plugin
                    image: jritsema/rpi-elasticsearch:2.4.0
                    command: ["/bin/sh", "-c"]
                    args:
                      - |
                        echo "Installing repository-s3 plugin for ES 2.4..."
                        cd /elasticsearch-2.4.0
                        ./bin/plugin install cloud-aws
                        echo "S3 plugin installation completed"
                        ls -la plugins/ || true
                    volumeMounts:
                    - name: elasticsearch-plugins
                      mountPath: /elasticsearch-2.4.0/plugins
                    securityContext:
                      runAsUser: 1000
                      runAsGroup: 1000
                      runAsNonRoot: true
                  containers:
                  - name: elasticsearch
                    image: jritsema/rpi-elasticsearch:2.4.0
                    command: ["/bin/sh", "-lc"]
                    securityContext:
                      runAsUser: 1000
                      runAsGroup: 1000
                      runAsNonRoot: true
                    args:
                      - >
                        ES_BIN="/elasticsearch-2.4.0/bin/elasticsearch";
                        if [ ! -x "$ES_BIN" ]; then
                          echo "ERROR: elasticsearch binary not found";
                          ls -la /elasticsearch-2.4.0/bin || true;
                          sleep 3600;
                        fi;
                        echo "Checking installed plugins:";
                        ls -la /elasticsearch-2.4.0/plugins/ || true;
                        exec "$ES_BIN"
                          -Des.path.conf=/elasticsearch-2.4.0/config
                          -Des.network.host=0.0.0.0
                          -Des.http.host=0.0.0.0
                          -Des.transport.host=0.0.0.0
                          -Des.discovery.zen.minimum_master_nodes=1
                          -Des.bootstrap.system_call_filter=false
                          -Djava.net.preferIPv4Stack=true
                    ports:
                    - containerPort: 9200
                      name: http
                    - containerPort: 9300
                      name: transport
                    volumeMounts:
                    - name: elasticsearch-config
                      mountPath: /elasticsearch-2.4.0/config/elasticsearch.yml
                      subPath: elasticsearch.yml
                    - name: elasticsearch-plugins
                      mountPath: /elasticsearch-2.4.0/plugins
                    - name: elasticsearch-data
                      mountPath: /elasticsearch-2.4.0/data
                    - name: elasticsearch-logs
                      mountPath: /elasticsearch-2.4.0/logs
                    readinessProbe:
                      httpGet:
                        path: /
                        port: 9200
                      initialDelaySeconds: 5
                      periodSeconds: 3
                      failureThreshold: 20
                    resources:
                      requests:
                        cpu: 500m
                        memory: 1Gi
                      limits:
                        cpu: 1000m
                        memory: 2Gi
                  volumes:
                  - name: elasticsearch-config
                    configMap:
                      name: {{inputs.parameters.cluster-name}}-config
                  - name: elasticsearch-plugins
                    emptyDir: {}
                  - name: elasticsearch-data
                    emptyDir: {}
                  - name: elasticsearch-logs
                    emptyDir: {}
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: {{inputs.parameters.cluster-name}}
              namespace: {{inputs.parameters.namespace}}
            spec:
              selector:
                app: {{inputs.parameters.cluster-name}}
              ports:
              - name: http
                port: 9200
                targetPort: 9200
              - name: transport
                port: 9300
                targetPort: 9300
            EOF
            
            # Apply the deployment
            kubectl apply -f /tmp/elasticsearch-2-4.yaml
            
            # Wait for deployment to be ready
            kubectl wait --for=condition=available --timeout=300s deployment/{{inputs.parameters.cluster-name}} -n {{inputs.parameters.namespace}}
            
            # Generate cluster configuration output
            cat > /tmp/cluster-config.json << EOF
            {
              "endpoint": "http://{{inputs.parameters.cluster-name}}:9200",
              "allow_insecure": true,
              "no_auth": null,
              "version": "ES_2.4"
            }
            EOF

            kubectl create configmap {{inputs.parameters.cluster-name}}-migration-config \
              --from-file=cluster-config=/tmp/cluster-config.json \
              -n {{inputs.parameters.namespace}} \
              --dry-run=client -o yaml | kubectl apply -f -
            
            echo "Elasticsearch 2.4 cluster created successfully"
            echo "Cluster config:"
            cat /tmp/cluster-config.json
      outputs:
        parameters:
          - name: cluster-config
            valueFrom:
              path: /tmp/cluster-config.json

    # Elasticsearch 5.6 Single Node Template
    - name: elasticsearch-5-6-single-node
      inputs:
        parameters:
          - name: cluster-name
          - name: namespace
      container:
        image: dtzar/helm-kubectl:latest
        command: [sh, -c]
        args:
          - |
            # Add Elasticsearch Helm repository
            helm repo add elastic https://helm.elastic.co
            helm repo update
            
            # Create Elasticsearch configuration for ES 5.6.16
            cat > /tmp/elasticsearch.yml << EOF
            bootstrap.system_call_filter: false
            network.host: 0.0.0.0
            cloud.aws.access_key: test
            cloud.aws.secret_key: test
            cloud.aws.region: us-east-2
            discovery.zen.minimum_master_nodes: 1
            EOF
            
            # Create Helm values file for ES 5.6.16
            cat > /tmp/es-values.yaml << 'EOF'
            fullnameOverride: {{inputs.parameters.cluster-name}}
            image: "docker.elastic.co/elasticsearch/elasticsearch"
            imageTag: "5.6.16"
            antiAffinity: "soft"
            esJavaOpts: "-Xmx512m -Xms512m"
            protocol: "http"
            replicas: 1
            createCert: false
            clusterHealthCheckParams: "wait_for_status=yellow&timeout=3s"
            readinessProbe:
              failureThreshold: 5
              successThreshold: 2
            extraEnvs:
              - name: "cluster.initial_master_nodes"
                value: ""
              - name: "node.roles"
                value: ""
            persistence:
              enabled: false
            
            extraInitContainers:
              - name: install-s3-plugin
                image: docker.elastic.co/elasticsearch/elasticsearch:5.6.16
                command: ["sh", "-c", "bin/elasticsearch-plugin install --batch repository-s3"]
                volumeMounts:
                  - name: plugins
                    mountPath: /usr/share/elasticsearch/plugins
            
            extraVolumes:
              - name: plugins
                emptyDir: {}
            
            extraVolumeMounts:
              - name: plugins
                mountPath: /usr/share/elasticsearch/plugins
            EOF
            
            # Install Elasticsearch 5.6.16
            helm install {{inputs.parameters.cluster-name}} elastic/elasticsearch \
              --version 8.5.1 \
              --namespace {{inputs.parameters.namespace}} \
              --values /tmp/es-values.yaml \
              --set-file esConfig."elasticsearch\.yml"=/tmp/elasticsearch.yml
            
            # Generate cluster configuration output
            cat > /tmp/cluster-config.json << EOF
            {
              "endpoint": "http://{{inputs.parameters.cluster-name}}:9200",
              "allow_insecure": true,
              "no_auth": null,
              "version": "ES_5.6"
            }
            EOF

            kubectl create configmap {{inputs.parameters.cluster-name}}-migration-config \
              --from-file=cluster-config=/tmp/cluster-config.json \
              --namespace {{inputs.parameters.namespace}}
            
            echo "Elasticsearch 5.6.16 cluster"
            echo "Cluster config:"
            cat /tmp/cluster-config.json
      outputs:
        parameters:
          - name: cluster-config
            valueFrom:
              path: /tmp/cluster-config.json

    # Elasticsearch 7.10 Single Node Template
    - name: elasticsearch-7-10-single-node
      inputs:
        parameters:
          - name: cluster-name
          - name: namespace
      container:
        image: dtzar/helm-kubectl:latest
        command: [sh, -c]
        args:
          - |
            # Add Elasticsearch Helm repository
            helm repo add elastic https://helm.elastic.co
            helm repo update
            
            cat > /tmp/elasticsearch.yml << EOF
            network.host: 0.0.0.0
            discovery.type: single-node
            EOF
            
            cat > /tmp/es-values.yaml << 'EOF'
            fullnameOverride: {{inputs.parameters.cluster-name}}
            image: "docker.elastic.co/elasticsearch/elasticsearch-oss"
            imageTag: "7.10.2"
            antiAffinity: "soft"
            esJavaOpts: "-Xmx512m -Xms512m"
            protocol: "http"
            replicas: 1
            createCert: false
            clusterHealthCheckParams: "wait_for_status=yellow&timeout=3s"
            readinessProbe:
              failureThreshold: 5
              successThreshold: 2
            extraEnvs:
              - name: node.roles
                value: "master,data,ingest"
              - name: "cluster.initial_master_nodes"
                value: ""
              - name: "AWS_REGION"
                value: "us-east-2"
            
              
            persistence:
              enabled: false
            
            extraInitContainers:
              - name: install-s3-plugin
                image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
                command: ["sh", "-c", "bin/elasticsearch-plugin install --batch repository-s3"]
                volumeMounts:
                  - name: plugins
                    mountPath: /usr/share/elasticsearch/plugins
              - name: inject-aws-creds
                image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
                command:
                  - sh
                  - -c
                  - |
                    set -e
                    echo "Creating Elasticsearch keystore and adding AWS credentials"
                    echo 'y' | bin/elasticsearch-keystore create
                    echo "test" | bin/elasticsearch-keystore add --stdin s3.client.default.access_key --force
                    echo "test" | bin/elasticsearch-keystore add --stdin s3.client.default.secret_key --force
                    # Copy keystore to shared volume location
                    cp /usr/share/elasticsearch/config/elasticsearch.keystore /shared/elasticsearch.keystore
                    echo "Keystore created and saved to shared volume"
                volumeMounts:
                  - name: elasticsearch-keystore
                    mountPath: /shared
                    
            
            extraVolumes:
              - name: plugins
                emptyDir: {}
              - name: elasticsearch-keystore
                emptyDir: {}
            
            extraVolumeMounts:
              - name: plugins
                mountPath: /usr/share/elasticsearch/plugins
              - name: elasticsearch-keystore
                mountPath: /usr/share/elasticsearch/config/elasticsearch.keystore
                subPath: elasticsearch.keystore
            EOF
            
            helm install {{inputs.parameters.cluster-name}} elastic/elasticsearch \
              --version 8.5.1 \
              --namespace {{inputs.parameters.namespace}} \
              --values /tmp/es-values.yaml \
              --set-file esConfig."elasticsearch\.yml"=/tmp/elasticsearch.yml
            
            # Generate cluster configuration output
            cat > /tmp/cluster-config.json << EOF
            {
              "endpoint": "http://{{inputs.parameters.cluster-name}}:9200",
              "allow_insecure": true,
              "no_auth": null,
              "version": "ES_7.10"
            }
            EOF

            kubectl create configmap {{inputs.parameters.cluster-name}}-migration-config \
              --from-file=cluster-config=/tmp/cluster-config.json \
              --namespace {{inputs.parameters.namespace}}
            
            echo "Elasticsearch 7.10 cluster"
            echo "Cluster config:"
            cat /tmp/cluster-config.json
      outputs:
        parameters:
          - name: cluster-config
            valueFrom:
              path: /tmp/cluster-config.json

    # OpenSearch 1.3 Single Node Template
    - name: opensearch-1-3-single-node
      inputs:
        parameters:
          - name: cluster-name
          - name: namespace
      container:
        image: dtzar/helm-kubectl:latest
        command: [sh, -c]
        args:
          - |
            # Add OpenSearch Helm repository
            helm repo add opensearch https://opensearch-project.github.io/helm-charts/
            helm repo update
            
            # Create OpenSearch configuration
            cat > /tmp/opensearch.yml << EOF
            cluster.name: {{inputs.parameters.cluster-name}}
            network.host: 0.0.0.0
            discovery.type: single-node
            EOF
            
            # Create OpenSearch values file
            cat > /tmp/opensearch-values.yaml << 'EOF'
            fullnameOverride: {{inputs.parameters.cluster-name}}
            nodeGroup: ""
            image:
              repository: "opensearchproject/opensearch"
              tag: "1.3.20"
            singleNode: true
            replicas: 1
            resources:
              requests:
                cpu: "500m"
                memory: "1Gi"
              limits:
                cpu: "1000m"
                memory: "2Gi"
            persistence:
              enabled: false
            opensearchJavaOpts: "-Xmx1g -Xms1g"
            plugins:
              enabled: true
              installList:
                - "repository-s3"
            EOF
            
            # Install OpenSearch 1.3
            helm install {{inputs.parameters.cluster-name}} opensearch/opensearch \
              --namespace {{inputs.parameters.namespace}} \
              --values /tmp/opensearch-values.yaml \
              --set-file config."opensearch\.yml"=/tmp/opensearch.yml
            
            # Generate cluster configuration output
            cat > /tmp/cluster-config.json << EOF
            {
              "endpoint": "https://{{inputs.parameters.cluster-name}}:9200",
              "allow_insecure": true,
              "version": "OS_1.3",
              "basic_auth": {
                "username": "admin",
                "password": "admin"
              }
            }
            EOF

            kubectl create configmap {{inputs.parameters.cluster-name}}-migration-config \
              --from-file=cluster-config=/tmp/cluster-config.json \
              --namespace {{inputs.parameters.namespace}}
            
            echo "OpenSearch 1.3 cluster created successfully"
            echo "Cluster config:"
            cat /tmp/cluster-config.json
      outputs:
        parameters:
          - name: cluster-config
            valueFrom:
              path: /tmp/cluster-config.json

    # OpenSearch 2.19 Single Node Template
    - name: opensearch-2-19-single-node
      inputs:
        parameters:
          - name: cluster-name
          - name: namespace
      container:
        image: dtzar/helm-kubectl:latest
        command: [sh, -c]
        args:
          - |
            # Add OpenSearch Helm repository
            helm repo add opensearch https://opensearch-project.github.io/helm-charts/
            helm repo update
            
            # Create OpenSearch configuration
            cat > /tmp/opensearch.yml << EOF
            cluster.name: {{inputs.parameters.cluster-name}}
            network.host: 0.0.0.0
            discovery.type: single-node
            EOF
            
            # Create OpenSearch values file
            cat > /tmp/opensearch-values.yaml << 'EOF'
            fullnameOverride: {{inputs.parameters.cluster-name}}
            nodeGroup: ""
            image:
              repository: "opensearchproject/opensearch"
              tag: "2.19.1"
            singleNode: true
            replicas: 1
            extraEnvs:
              - name: "OPENSEARCH_INITIAL_ADMIN_PASSWORD"
                value: "myStrongPassword123!"
            resources:
              requests:
                cpu: "500m"
                memory: "1Gi"
              limits:
                cpu: "1000m"
                memory: "2Gi"
            persistence:
              enabled: false
            opensearchJavaOpts: "-Xmx1g -Xms1g"
            plugins:
              enabled: true
              installList:
                - "repository-s3"
            EOF
            
            # Install OpenSearch 2.19.1
            helm install {{inputs.parameters.cluster-name}} opensearch/opensearch \
              --namespace {{inputs.parameters.namespace}} \
              --values /tmp/opensearch-values.yaml \
              --set-file config."opensearch\.yml"=/tmp/opensearch.yml
            
            # Generate cluster configuration output
            cat > /tmp/cluster-config.json << EOF
            {
              "endpoint": "https://{{inputs.parameters.cluster-name}}:9200",
              "allow_insecure": true,
              "version": "OS_2.19",
              "basic_auth": {
                "username": "admin",
                "password": "myStrongPassword123!"
              }
            }
            EOF

            kubectl create configmap {{inputs.parameters.cluster-name}}-migration-config \
              --from-file=cluster-config=/tmp/cluster-config.json \
              --namespace {{inputs.parameters.namespace}}
            
            echo "OpenSearch 2.19.1 cluster created successfully"
            echo "Cluster config:"
            cat /tmp/cluster-config.json
      outputs:
        parameters:
          - name: cluster-config
            valueFrom:
              path: /tmp/cluster-config.json
